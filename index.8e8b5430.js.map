{"mappings":"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","sources":["src/snake.js","<<jsx-config-pragma.js>>"],"sourcesContent":["class Snake {\n  constructor() {\n    this.body = [{ x: 0, y: 0 }];\n    this.direction = \"right\";\n    this.length = 1;\n    this.fruit = { x: 0, y: 0 };\n    this.score = 0;\n    this.speed = 5;\n    this.boxSize = 20;\n    this.boxWidth = 500;\n    this.boxHeight = 400;\n  }\n\n  update() {\n    classifyVideo();\n    this.changeDirection(label);\n\n    let head;\n    let newHead;\n    try {\n      head = this.body[this.body.length - 1];\n      newHead = { x: head.x, y: head.y };\n    } catch (err) {\n      console.log(err);\n    }\n\n    switch (this.direction) {\n      case \"up\":\n        newHead.y -= this.speed;\n        break;\n      case \"down\":\n        newHead.y += this.speed;\n        break;\n      case \"left\":\n        newHead.x -= this.speed;\n        break;\n      case \"right\":\n        newHead.x += this.speed;\n        break;\n    }\n\n    this.body.shift();\n    this.body.push(newHead);\n\n    if (this.checkCollision()) {\n      this.reset();\n    }\n\n    if (this.checkFruitCollision()) {\n      this.length++;\n      this.score++;\n      this.generateFruit();\n    }\n  }\n\n  draw() {\n    fill(0);\n    rect(0, 0, this.boxWidth, this.boxHeight);\n    this.drawScore();\n    this.drawFruit();\n    this.drawSnake();\n  }\n\n  drawSnake() {\n    fill(255);\n    for (let i = 0; i < this.body.length; i++) {\n      try {\n        rect(this.body[i].x, this.body[i].y, this.boxSize, this.boxSize);\n      } catch {\n        console.log(\"Error 58 - \", i);\n      }\n    }\n  }\n\n  drawFruit() {\n    fill(255, 0, 0);\n    rect(this.fruit.x, this.fruit.y, this.boxSize, this.boxSize);\n  }\n\n  drawScore() {\n    fill(0, 0, 255);\n    textSize(20);\n    text(`Score: ${this.score}`, 50, 30);\n  }\n\n  checkCollision() {\n    let head = this.body[this.body.length - 1];\n\n    if (\n      head.x < 0 ||\n      head.x >= this.boxWidth ||\n      head.y < 0 ||\n      head.y >= this.boxHeight\n    ) {\n      return true;\n    }\n\n    for (let i = 0; i < this.body.length - 1; i++) {\n      if (this.body[i].x === head.x && this.body[i].y === head.y) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  generateFruit() {\n    let x =\n      Math.floor(Math.random() * (this.boxWidth / this.boxSize)) * this.boxSize;\n    let y =\n      Math.floor(Math.random() * (this.boxHeight / this.boxSize)) *\n      this.boxSize;\n    this.fruit = { x: x, y: y };\n  }\n\n  checkFruitCollision() {\n    let head = this.body[this.body.length - 1];\n\n    if (\n      head.x + this.boxSize / 2 >= this.fruit.x &&\n      head.y + this.boxSize / 2 >= this.fruit.y &&\n      head.x + this.boxSize / 2 <= this.fruit.x + this.boxSize &&\n      head.y + this.boxSize / 2 <= this.fruit.y + this.boxSize\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  reset() {\n    this.body = [{ x: 0, y: 0 }];\n    this.direction = \"right\";\n    this.length = 1;\n    this.fruit = { x: 0, y: 0 };\n    this.score = 0;\n  }\n\n  changeDirection(direction) {\n    direction = direction.toLowerCase();\n    this.direction = direction;\n    // if (direction === \"up\" && this.direction !== \"down\") {\n    //   this.direction = \"up\";\n    // } else if (direction === \"down\" && this.direction !== \"up\") {\n    //   this.direction = \"down\";\n    // } else if (direction === \"left\" && this.direction !== \"right\") {\n    //   this.direction = \"left\";\n    // } else if (direction === \"right\" && this.direction !== \"left\") {\n    //   this.direction = \"right\";\n    // }\n  }\n}\n",null],"names":["_classCallCheck","instance","Constructor","Snake","this","body","x","y","direction","length","fruit","score","speed","boxSize","boxWidth","boxHeight","key","head","newHead","classifyVideo","changeDirection","label","err","console","log","shift","push","checkCollision","reset","checkFruitCollision","generateFruit","fill","rect","drawScore","drawFruit","drawSnake","i","e","textSize","text","concat","Math","floor","random","toLowerCase"],"version":3,"file":"index.8e8b5430.js.map"}